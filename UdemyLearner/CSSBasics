everything in a page can be treated as a box, give it height and width, and it can be individually styled using the border.
When width is defined in px, it means the width of the box, when defined in % it means the width wrt to the page size, so if you magnify/reduce the page size, the % attribute will adjust according to the size, whereas the px will remain constant.
to use it directly with the tag elements - body{}.
Create a class and use - .foo{}, in HTML - <div class= "foo">
Create a id and use - #fooId{}, in HTML - <div id="fooId">
id has more precedence than class and then tag. id<< class<< tag
id is unique and can be used in one place, class can be reused in multiple places.
can use multiple classes in same element by - .foo1{} .foo2{} , in HTML - <div class="foo1 foo2">
use it in  a HTML page using - <link rel="stylesheet" href="../styles.css">
inline styling has precedence over cssSheet.
selector{property:value;}
- favicons - a small icon on the side of title. favicon.cc Can be used in the <link rel="icon" href="favicon.co">
- boxmodel styling - 
    0. position - the position is the outermost cover between the screen and element
    1. margin - the space that is outside of the border and inside to position. It can be used to increase space between two elements next to each other.
    2. border - the border lies inside to margin and outside to padding, border can cover the element and can have its own thickness.
    3. padding - the padding lies inside to border and outside to element. It is the space between border and element.
    4. element - the original element which resides.

    SCREEN[0.position[1.Margin[2.Border[3.Padding[4.Element]3.Padding]2.Border]1.Margin]0.position]SCREEN
- inline elements - <span>,<img>,<a> These elements are inline and when used, they'll be next to each other. They use only the space required in the box model.
- block elements - <h1>,<p>,<div>,<ol>,<ul>,<li>,<form>, these elements take up the complete row as a block rectangle, they dont allow other elements to be side by side.
- All inline elements do not have access to setting the width of the rectangle it resides in. This is because HTML wants inline elements to act like inline and wants other elements to sit next to it. But if you try to manipulate the width, it wont be able to do so.
- All block elements can have their width be changed and altered.
- Using <span> we can make modifications to a block element, this span treats an element like an inline element. Ex - <p>This is a block element. but <span>This is a span</span> inside a block</p>.
  A span allows you to add css to a block element's part without changing the complete element.

- display - block, inline, inline-block, none
    1. block - you can style an inline element to act like a block element by adding the display property as block. Adding a width will change the width of the element.
               Ex - .foo{ display: block; width:100px} 
    2. inline - a block element can be styled as an inline using the display:inline. Even if you provide the width info, it'll not change and element will continue to sit next to each other.
               Ex - .foo{ display: inline; width:100px}
    3. inline-block - inline block, allows the element to be on the same line and also use the width property. So keep elements in the same line and also allow it be sized according to the width.
               Ex - .foo{display: inline-block}
    4. none -  When we use none, the element is out of the flow of the page, which means the element is disappeared as well as other elements will take up its space.
- visibility: hidden; - hides the element but the space it used, still exists on the page, and other elements will only come after it.

- position - static, relative, absolute, fixed
    1. static - the basic HTML positioning already in place. By default all elements are using static positioning. 
                Ex. .foo{position: static;}
    2. relative - Should be understood as adding a margin to where the element should have been in static position.
                  If  you give an element a relative position, it means that the element's position is now relative to its original static position. 
                  For ex - A box on the LHS of the screen with positioning relative, if you make .foo{position:relative; left:100px;}. This means that the element will move to the RHS of the screen 100px. 
                  This is because, it will first see where it used to be in static position, 0,0,0,0. now Left 100 will ask it to move to the RHS of the screen. Left = increase in Left Margin = Movement to RHS of screen. Similar - Top = increase in Top margin = movement to bottom of screen.
                  If an element is below this element and a Top is used, it'll overlap the below element.           
    3. absolute - Should be understood as adding a margin to its parent element.
                  When an element is nested in a parent element, and then it uses the position as absolute, any changes will become related to the parent element.
                  <div><div></div></div>. When for inner div we use {position:absolute; top:10;} it'll actually move it to the top, since the margin wrt to parent.
                  When a parent div is set as position absolute, it becomes absolute to the body, which means if you give top... it takes this margin info from outside of body. check the positioningHTML.
    4. fixed - the element using this, stays fixed even while scrolling. It'll stay there and while scrolling top/bottom it'll be present always                

CSS styles - 

background-color:blue;    - set the background color of the element.
height: 20px/20%;         - set the height of the element
width: 20px/20%           - set the width of the element
border: solid 20px;       - sets a solid border with 20px
border-color:blue         - set the border around the element to blue
border-top-style: dashed; - the top of the border of an element 
border-bottom-style
border-right-style
border-left-style
border-width:4px;         - set the width of the border
border-width: top right bottom left - sets the width for complete border in clockwise direction 
color:#B97A95;            - set the element color
font-size: 200px;         - set the font size;
font-family: "Sans-Serif" - set the style of font family;
margin-top:0px;           - sets the space between the element above and the current element
margin-bottom:1px;        - sets the space/margin between the element below and the current element.
margin-start:20px         - sets the space/margin between the element and the screen side being right.
margin-end:10px;          - sets the space/margin between the element and the screen side being left.
display: inline;          - makes the element act like a inline element, takes only the space required and allows other element to fall next to it.Width and height manipulation does not work.
display: block;           - makes the element act as a block element, occupies the entire screen width, does not allow elements to fall next to it. Width and height manipulation works  
display: inline-block;    - makes the element act as both inline and block, allows elements to fall next to it and also allows width and height manipulation.
display: none;            - makes the element dissappear from the page, elements can take its place.
visibility: hidden;       - makes the element dissappear but other elements can't come in its place, empty space is still present in the page.  
position: static;         - default position of element in HTML  
position: relative;       - this defines the position of the element with the actual static position of the element. Directions work opposite than expected. When the relative is used, it takes the position from the body, if parent is body.
position: absolute;       - this defines the position of the element with respect to the parent element, directions work as expected. When the absolute is used, it takes the position from the screen, if parent is body.
position: fixed;          - this defines the position of the element as fixed, even if you scroll.